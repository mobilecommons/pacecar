{"body":"Pacecar\r\n=======\r\n\r\n[![Build Status](https://secure.travis-ci.org/thoughtbot/pacecar.png?branch=master)](http://travis-ci.org/thoughtbot/pacecar)\r\n\r\nPacecar adds scope methods and other common functionality to ActiveRecord classes via database column introspection.\r\n\r\nPacecar automatically includes the Pacecar::Helpers module into all ActiveRecord::Base classes.\r\n\r\nTo get all Pacecar functionality, you need to \"include Pacecar\" in your class.\r\n\r\n    class User < ActiveRecord::Base\r\n      include Pacecar\r\n    end\r\n\r\nTo get some subset (for example, only the state functionality), you can do something like \"include Pacecar::State\" to get only the module(s) you want.\r\n\r\n    class Post < ActiveRecord::Base\r\n      include Pacecar::State\r\n    end\r\n\r\nPacecar supports mysql, postgres and sqlite database drivers, and is compatible with Rails 3.0.x and 3.1.x versions.\r\n\r\nInstallation\r\n------------\r\n\r\nFor rails 3, just include in your Gemfile\r\n\r\n    gem 'pacecar'\r\n\r\nFor prior rails versions, there is a rails2 branch to use:\r\n\r\n    gem 'pacecar', :git => 'git://github.com/thoughtbot/pacecar.git', :branch => 'rails2'\r\n\r\nUsage\r\n-----\r\n\r\nAssuming a database schema:\r\n\r\n    class CreateSchema < ActiveRecord::Migration\r\n      def self.up\r\n        create_table :users, :force => true do |t|\r\n          t.boolean :admin, :default => false, :null => false\r\n          t.datetime :approved_at\r\n          t.datetime :rejected_at\r\n          t.string :first_name\r\n          t.string :last_name\r\n          t.text :description\r\n          t.timestamps\r\n        end\r\n        create_table :posts, :force => true do |t|\r\n          t.string :owner_type\r\n          t.integer :owner_id\r\n          t.string :publication_state\r\n          t.string :post_type\r\n          t.timestamps\r\n        end\r\n        create_table :comments, :force => true do |t|\r\n          t.integer :user_id\r\n          t.text :description\r\n          t.integer :rating\r\n          t.timestamps\r\n        end\r\n      end\r\n    end\r\n\r\nAnd some basic model declarations:\r\n\r\n    class User < ActiveRecord::Base\r\n      include Pacecar\r\n      has_many :posts, :as => :owner\r\n      has_many :comments\r\n      has_many :articles\r\n      has_ranking :comments\r\n      has_recent_records :comments\r\n      has_recent_records :articles, :comments\r\n      has_calculated_records :comments, :on => :rating\r\n    end\r\n\r\n    class Post < ActiveRecord::Base\r\n      include Pacecar\r\n      PUBLICATION_STATES = %w(Draft Submitted Rejected Accepted)\r\n      TYPES = %w(Free Open Private Anonymous PostModern)\r\n      belongs_to :owner, :polymorphic => true\r\n      has_state :publication_state\r\n      has_state :post_type, :with => TYPES\r\n      has_polymorph :owner\r\n    end\r\n\r\n    class Comment < ActiveRecord::Base\r\n      include Pacecar\r\n      belongs_to :user\r\n    end\r\n\r\n    class Article < ActiveRecord::Base\r\n      belongs_to :user\r\n    end\r\n\r\nAll columns\r\n-----------\r\n\r\nRecords where approved\\_at is not null, or where it is null:\r\n\r\n    User.approved_at_present\r\n    User.approved_at_missing\r\n\r\nRecords where first\\_name is not null, or where it is null:\r\n\r\n    User.first_name_present\r\n    User.first_name_missing\r\n\r\nRecords ordered by first\\_name (default to 'asc', can specify to override):\r\n\r\n    User.by_first_name\r\n    User.by_first_name(:asc)\r\n    User.by_first_name(:desc)\r\n\r\nRecords where an attribute matches a search term (column LIKE \"%term%\"):\r\n\r\n    User.first_name_matches('John')\r\n\r\nRecords where an attribute starts or ends with a search term:\r\n\r\n    User.first_name_starts_with('A')\r\n    User.first_name_ends_with('a')\r\n\r\nRecords where an attribute matches exactly a term:\r\n\r\n    User.first_name_equals('John')\r\n\r\nRecords where any non-state text or string column matches term:\r\n\r\n    User.search_for('test')\r\n\r\nRecords where any of a list of columns match the term:\r\n\r\n    User.search_for 'test', :on => [:first_name, :last_name]\r\n\r\nRecords where all of a list of columns match the term:\r\n\r\n    User.search_for 'test', :on => [:first_name, :last_name], :require => :all\r\n\r\nBoolean columns\r\n---------------\r\n\r\nRecords that are all admins or non-admins:\r\n\r\n    User.admin\r\n    User.not_admin\r\n\r\nThe \"balance\" (count of true minus false for column in question):\r\n\r\n    User.admin_balance\r\n\r\nDatetime columns\r\n----------------\r\n\r\nRecords approved before or after certain times:\r\n\r\n    User.approved_at_before(5.days.ago)\r\n    User.approved_at_after(4.weeks.ago)\r\n\r\nRecords with approved\\_at in the past or future:\r\n\r\n    User.approved_at_in_past\r\n    User.approved_at_in_future\r\n\r\nRecords with approved\\_at inside or outside of two times:\r\n\r\n    User.approved_at_inside(10.days.ago, 1.day.ago)\r\n    User.approved_at_outside(2.days.ago, 1.day.ago)\r\n\r\nRecords with certain year, month or day:\r\n\r\n    User.approved_at_in_year(2000)\r\n    User.approved_at_in_month(01)\r\n    User.approved_at_in_day(01)\r\n\r\nRecords with a duration (time delta between two columns) of, over or under a certain number of days:\r\n\r\n    User.with_duration_of(14, :approved_at, :rejected_at)\r\n    User.with_duration_over(14, :approved_at, :rejected_at)\r\n    User.with_duration_under(14, :approved_at, :rejected_at)\r\n\r\nPolymorphic relationships\r\n-------------------------\r\n\r\nRecords which have an owner\\_type of User:\r\n\r\n    Post.for_owner_type(User)\r\n\r\nAssociations\r\n------------\r\n\r\nRecords with the most and least associated records:\r\n\r\n    User.maximum_comments\r\n    User.minimum_comments\r\n\r\nRecords with associated records since a certain time:\r\n\r\n    User.recent_comments_since(2.days.ago)\r\n    User.recent_comments_and_posts_since(3.days.ago)\r\n    User.recent_comments_or_posts_since(4.days.ago)\r\n\r\nRecords with highest and lowest association column average:\r\n\r\n    User.by_comments_highest_rating_average\r\n    User.by_comments_lowest_rating_average\r\n\r\nRecords with highest and lowest association column total:\r\n\r\n    User.by_comments_highest_rating_total\r\n    User.by_comments_lowest_rating_total\r\n\r\nState columns\r\n-------------\r\n\r\nRecords which are in a particular state, or not in a state:\r\n\r\n    Post.publication_state_draft\r\n    Post.post_type_not_open\r\n\r\nQuery methods on instances to check state:\r\n\r\n    Post.first.publication_state_draft?\r\n    Post.last.post_type_not_open?\r\n\r\nNumeric columns\r\n---------------\r\n\r\nRecords which are greater than or less than a certain value:\r\n\r\n    User.age_greater_than(21)\r\n    User.age_greater_than_or_equal_to(21)\r\n    User.age_less_than(21)\r\n    User.age_less_than_or_equal_to(21)\r\n\r\nLimits\r\n------\r\n\r\nFirst x records:\r\n\r\n    User.limited(10)\r\n\r\nNamed scopes\r\n------------\r\n\r\nBecause these are all scope, you can combine them.\r\n\r\nTo get all users that have a first\\_name set, who are admins and approved more than 2 weeks ago, ordered by their first name:\r\n\r\n    User.first_name_present.admin.approved_at_before(2.weeks.ago).by_first_name\r\n\r\nTo get the top 10 commenters:\r\n\r\n    User.maximum_comments.limited(10)\r\n\r\nSupported Databases\r\n-------------------\r\n\r\n* MySQL\r\n* SQLite\r\n* Postgres\r\n\r\nCredits\r\n-------\r\n\r\n![thoughtbot](http://thoughtbot.com/images/tm/logo.png)\r\n\r\nPacecar is maintained and funded by [thoughtbot, inc](http://thoughtbot.com/community)\r\n\r\nThank you to all [the contributors](https://github.com/thoughtbot/pacecar/contributors)!\r\n\r\nThe names and logos for thoughtbot are trademarks of thoughtbot, inc.\r\n\r\nLicense\r\n-------\r\n\r\nPacecar is Copyright Â© 2008-2011 thoughtbot. It is free software, and may be redistributed under the terms specified in the MIT-LICENSE file.","name":"Pacecar","tagline":"Generated scopes for ActiveRecord classes","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}